using session in flask
how does flask work/link with python (try to understand concept)


import mysql.connector
from flask import Blueprint, render_template, request, flash, redirect, url_for, session
from hashlib import sha256  # For password hashing
from .models import db, User
import os
from flask import Flask,redirect
from .db import db_connection
# from flask import Blueprint, render_template, request, flash, redirect, url_for
# from flask_login import current_user, login_required
# from .db import db_connection  # Import the db_connection function from db.py

# notes_bp = Blueprint('notes', __name__)

# @notes_bp.route('/notes', methods=['GET', 'POST'])
# @login_required
# def notes():
#     if request.method == 'POST':
#         if 'note_id' in request.form:
#             # This is an edit operation
#             note_id = int(request.form['note_id'])
#             edited_content = request.form['note_content']

#             db = db_connection()  # Get the database connection
#             cursor = db.cursor()
#             cursor.execute("UPDATE notes SET content = %s WHERE id = %s", (edited_content, note_id))
#             db.commit()
#             cursor.close()
#             flash('Note edited successfully', 'success')
#         elif 'delete_note' in request.form:
#             # This is a delete operation
#             note_id = int(request.form['delete_note'])
#             db = db_connection()  # Get the database connection
#             cursor = db.cursor()
#             cursor.execute("DELETE FROM notes WHERE id = %s", (note_id,))
#             db.commit()
#             cursor.close()
#             flash('Note deleted successfully', 'success')
#         else:
#             # This is a create operation
#             note_content = request.form['note_content']
#             db = db_connection()  # Get the database connection
#             cursor = db.cursor()
#             cursor.execute("INSERT INTO notes (user_id, content) VALUES (%s, %s)", (current_user.id, note_content))
#             db.commit()
#             cursor.close()
#             flash('Note created successfully', 'success')

#     db = db_connection()  # Get the database connection
#     cursor = db.cursor()
#     cursor.execute("SELECT id, content FROM notes WHERE user_id = %s", (current_user.id,))
#     notes = cursor.fetchall()
#     cursor.close()

#     return render_template("home/notes.html", notes=notes)




@bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        remember_me = request.form.get('remember_me')  # Check if "Remember Me" is selected


        user = get_user_by_username(username)

        if user:
            hashed_password = sha256(password.encode()).hexdigest()

            if user['password'] == hashed_password:
                session['user_id'] = user['id']  # Store user_id in the session
                flash('Login successful', category='success')
                # Use the 'remember' parameter to control whether the user should be remembered
                login_user(user, remember=remember_me)
                return redirect(url_for('home.index'))
                

        flash('Login failed. Please check your username and password.', category='error')

    return render_template("home/login.html")



    @bp.route('/notes', methods=['GET', 'POST'])
@login_required  # Use the @login_required decorator
def notes():
    if request.method == 'POST':
        if 'note_id' in request.form:
            # This is an edit operation
            note_id = int(request.form['note_id'])
            edited_content = request.form['note_content']

            db = db_connection()  # Get the database connection
            cursor = db.cursor()
            cursor.execute("UPDATE notes SET content = %s WHERE id = %s", (edited_content, note_id))
            db.commit()
            cursor.close()
            flash('Note edited successfully', 'success')
        elif 'delete_note' in request.form:
            # This is a delete operation
            note_id = int(request.form['delete_note'])
            db = db_connection()  # Get the database connection
            cursor = db.cursor()
            cursor.execute("DELETE FROM notes WHERE id = %s", (note_id,))
            db.commit()
            cursor.close()
            flash('Note deleted successfully', 'success')
        else:
            # This is a create operation
            note_content = request.form['note_content']
            db = db_connection()  # Get the database connection
            cursor = db.cursor()
            cursor.execute("INSERT INTO notes (user_id, content) VALUES (%s, %s)", (current_user.id, note_content))
            db.commit()
            cursor.close()
            flash('Note created successfully', 'success')

    db = db_connection()  # Get the database connection
    cursor = db.cursor()
    cursor.execute("SELECT id, content FROM notes WHERE user_id = %s", (current_user.id,))
    notes = cursor.fetchall()
    cursor.close()

    return render_template("home/notes.html", notes=notes)





    (OKE )
    @bp.route("/create_secret", methods=['GET', 'POST'])
def create_secret():
    if 'user_id' in session:
        if request.method == 'POST':
            content = request.form.get('content')
            if content:
                user_id = session['user_id']
                # Insert the secret into the database
                db = db_connection()
                cursor = db.cursor()
                cursor.execute("INSERT INTO secrets (user_id, content) VALUES (%s, %s)", (user_id, content))
                db.commit()
                cursor.close()
                flash('Secret created successfully', category='success')
                return redirect(url_for('home.secrets'))
    return render_template("home/create_secret.html")




create
/* Styles for h1 element */
h1 {
    color: rgb(248, 0, 0);
    font-size: 50px;
    position: absolute;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Styles for h2 element */
h2 {
    color: rgb(248, 0, 0);
    font-size: 50px;
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Styles for both ul and .secret-item elements */
/* Styles for ul element */
ul.secret-list {
    list-style-type: square;
    padding: 5px;
    z-index: 1; /* You can keep this if needed */
}

/* Styles for .secret-item elements */
.secret-item {
    color: rgb(248, 0, 0);
    font-size: 18px;
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    position: relative;
    z-index: 2; /* You can keep this if needed */
}



ORIGINAL CREATE 
@bp.route("/create_secret", methods=['GET', 'POST'])
def create_secret():
    if 'user_id' in session:
        if request.method == 'POST':
            content = request.form.get('content')
            if content:
                user_id = session['user_id']
                # Insert the secret into the database
                db = db_connection()
                cursor = db.cursor()
                cursor.execute("INSERT INTO secrets (user_id, content) VALUES (%s, %s)", (user_id, content))
                db.commit()
                cursor.close()
                flash('Secret created successfully', category='success')
                return redirect(url_for('home.create_secret'))

        # Fetch and display user's secrets
        user_id = session['user_id']
        secrets = get_user_secrets(user_id)

        return render_template("home/create_secret.html", secrets=secrets)

    return render_template("home/create_secret.html")



MAIN CSS

html, body {
    margin: 0;
    padding: 0;
}
/* Reset some default margins and padding */
/* Style the video element */
video {
    margin: 0;
    padding: 0;
    overflow: hidden;
    width: 100%;
    height: auto;
}

body {
    margin: 0;
    padding: 0;
  
}

.navbar {
    background-color: #333;
    overflow: hidden;
    margin: 0;
    padding: 0;
}

.navbar a {
    display: inline-block;
    color: #f2f2f2;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    transition: background-color 0.3s, color 0.3s;
}

.navbar a:hover {
    background-color: #ddd;
    color: #333;
}

.navbar-right {
    float: right;
}

/* Add media query for responsiveness */
@media screen and (max-width: 600px) {
    .navbar a, .navbar-right {
        float: none;
        display: block;
        text-align: center;
    }
}

/* Styles for the alerts */
/* Remove background color from flash messages */
.alert {
    padding: 0px; /* Adjust the padding as needed */
    margin: 0px; /* Adjust the margin as needed *
    background-color: transparent; /* Set the background to transparent */
    border: none; /* Remove the border */
    color: inherit; /* Use the default text color */
    font-weight: normal; /* Use the default font weight */
}


.alert-danger {
    background-color: #f2dede;
    border: 1px solid #ebccd1;
    color: #a94442;
}

.alert-success {
    background-color: #dff0d8;
    border: 1px solid #d6e9c6;
    color: #3c763d;
}

.close {
    float: right;
    font-size: 20px;
    cursor: pointer;
}

/* Remove the default list style */
ul {
    list-style: none;
    padding: 0;
    margin: 0;
}


/* Style the background div */
div {
    background-image: url('add_your_image_url_here');
    width: 100%;
    height: 30vh;
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center center;
}

/* Style the ain grid */
.main {
    display: grid;
    grid-template-rows: 200px 200px 200px;
    grid-template-columns: 200px 200px 200px;
    grid-gap: 200px 200px;
    justify-content: center;
    top: 0;
    left: 0;
    position: absolute;
    font-size: 25px;
    top: 170%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Style the article sections */
.KeepThemSafe,
.MakeitEasy,
.AutomateCustom {
    color: #000000;
    width: 200px;
    height: 200px;
}

/* Style the about section */
.about {
    color: #000000;
}

/* Style the form */
form {
    color: white;
    top: 0;
    left: 0;
    position: absolute;
    font-size: 20px;
    top: 60%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Style the h1 element */
h1 {
    color: white;
    top: 0;
    left: 0;
    position: absolute;
    font-size: 100px;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Style the big button */
.bigbutton {
    display: inline-block;
    padding: 40px 50px;
    background-color: #eeee08da;
    color: #000000;
    font-size: 24px;
    border: none;
    cursor: pointer;
    border-radius: 30px;
    text-align: center;
    position: absolute;
    top: 200%;
    right: 500px;
    transform: translateY(-50%);
}

/* Style the big button on hover */
.bigbutton:hover {
    background-color: #2980b9;
}

/* Additional styles for the "REGISTRATION" text */
.registration-text {
    color: white;
    top: 0;
    left: 0;
    position: absolute;
    font-size: 100px;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
}
